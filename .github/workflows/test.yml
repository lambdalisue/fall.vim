name: Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash --noprofile --norc -eo pipefail {0}

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
      - name: Lint
        run: deno lint
      - name: Format
        run: deno fmt --check
      - name: Type check
        run: deno task check

  test:
    strategy:
      matrix:
        runner:
          - windows-latest
          - macos-latest
          - ubuntu-latest
        deno_version:
          - "1.45.x"
          - "1.x"
        host_version:
          - vim: "v9.1.0448"
            nvim: "v0.10.0"

    runs-on: ${{ matrix.runner }}

    steps:
      - run: git config --global core.autocrlf false
        if: runner.os == 'Windows'

      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno_version }}

      - name: Get denops
        run: |
          git clone https://github.com/vim-denops/denops.vim /tmp/denops.vim
          echo "DENOPS_TEST_DENOPS_PATH=/tmp/denops.vim" >> "$GITHUB_ENV"

      - uses: rhysd/action-setup-vim@v1
        id: vim
        with:
          version: ${{ matrix.host_version.vim }}

      - uses: rhysd/action-setup-vim@v1
        id: nvim
        with:
          neovim: true
          version: ${{ matrix.host_version.nvim }}

      - name: Export executables
        run: |
          echo "DENOPS_TEST_VIM_EXECUTABLE=${{ steps.vim.outputs.executable }}" >> "$GITHUB_ENV"
          echo "DENOPS_TEST_NVIM_EXECUTABLE=${{ steps.nvim.outputs.executable }}" >> "$GITHUB_ENV"

      - name: Check versions
        run: |
          deno --version
          ${DENOPS_TEST_VIM_EXECUTABLE} --version
          ${DENOPS_TEST_NVIM_EXECUTABLE} --version

      - name: Perform pre-cache
        run: |
          deno cache ${DENOPS_TEST_DENOPS_PATH}/denops/@denops-private/mod.ts
          deno cache ./denops/**/*.ts

      - name: Run tests
        run: |
          deno task test:coverage
          deno task coverage --lcov > coverage.lcov
        timeout-minutes: 5

      - uses: codecov/codecov-action@v4
        with:
          os: ${{ runner.os }}
          files: ./coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}

  jsr-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Publish (dry-run)
        run: |
          deno publish --dry-run
